// Generated by CoffeeScript 1.10.0

/*
experiment.coffee
Fred Callaway

Demonstrates the jsych-mdp plugin
 */

(function() {
  var MDP, add_trial_data, debrief_block, experiment_blocks, getSubjectData, initial_state, instructions_block, md_to_html, mdp_block, psiturk, welcome_block,
    slice = [].slice;

  psiturk = new PsiTurk(uniqueId, adServerLoc, mode);

  add_trial_data = jsPsych.data.addDataToLastTrial;

  md_to_html = (function() {
    var converter;
    converter = new showdown.Converter();
    return function(txt) {
      return converter.makeHtml(txt);
    };
  })();

  welcome_block = {
    type: "text",
    text: md_to_html('#MDP demonstration')
  };

  instructions_block = {
    type: "text",
    text: md_to_html("You will see **shapes** and push **buttons**, `F` and `J` mostly.\n\n*It's going to be great*!"),
    timing_post_trial: 500
  };

  MDP = (function() {
    var cycle, increasing, weighted_sample;
    weighted_sample = function(xs, ps) {
      var acc, i, j, ref, thresh;
      thresh = Math.random();
      acc = 0;
      for (i = j = 0, ref = xs.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        acc += ps[i];
        if (acc > thresh) {
          return xs[i];
        }
      }
    };
    cycle = function() {
      var i, opts;
      opts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      i = -1;
      return function() {
        i += 1;
        return opts[i % opts.length];
      };
    };
    increasing = function(start, step) {
      var x;
      x = start - step;
      return function() {
        x += step;
        return x;
      };
    };
    MDP = {
      circle: {
        id: 'circle',
        actions: {
          F: {
            img: 'static/images/blue.png',
            transition: function() {
              return weighted_sample(['circle', 'square'], [0.8, 0.2]);
            },
            reward: function() {
              return 1;
            }
          },
          J: {
            img: 'static/images/orange.png',
            transition: function() {
              return weighted_sample(['circle', 'square'], [0.2, 0.8]);
            },
            reward: function() {
              return 0;
            }
          }
        }
      },
      square: {
        id: 'square',
        actions: {
          F: {
            img: 'static/images/red.png',
            transition: function() {
              return weighted_sample(['square', 'final'], [0, 1]);
            },
            reward: function() {
              return 2;
            }
          },
          J: {
            img: 'static/images/green.png',
            transition: cycle('square', 'circle'),
            reward: increasing(3, 2)
          }
        }
      },
      final: {
        id: 'final',
        final: true
      }
    };
    return MDP;
  })();

  initial_state = MDP['circle'];

  mdp_block = {
    timeline: [
      {
        type: 'mdp',
        MDP: MDP,
        initial_state: initial_state
      }
    ],
    loop_function: function(data) {
      return !data[0].done;
    }
  };

  debrief_block = {
    type: 'text',
    text: function() {
      var subject_data;
      subject_data = getSubjectData();
      return '<p>You responded correctly on ' + subject_data.accuracy + '% of ' + 'the trials.</p> <p>Your average response time was <strong>' + subject_data.rt + 'ms</strong>. Press any key to complete the ' + 'experiment. Thank you!</p>';
    }
  };

  getSubjectData = function() {
    var correct_rt_count, correct_trial_count, i, sum_rt, trials;
    trials = jsPsych.data.getTrialsOfType('single-stim');
    sum_rt = 0;
    correct_trial_count = 0;
    correct_rt_count = 0;
    i = 0;
    while (i < trials.length) {
      if (trials[i].correct === true) {
        correct_trial_count++;
        if (trials[i].rt > -1) {
          sum_rt += trials[i].rt;
          correct_rt_count++;
        }
      }
      i++;
    }
    return {
      rt: Math.floor(sum_rt / correct_rt_count),
      accuracy: Math.floor(correct_trial_count / trials.length * 100)
    };
  };

  experiment_blocks = [welcome_block, mdp_block];

  console.log('initialze jsPsych');

  jsPsych.init({
    display_element: $('#jspsych-target'),
    timeline: experiment_blocks,
    on_finish: function() {
      jsPsych.data.displayData();
    }
  });

}).call(this);
